plugins {
    id 'io.micronaut.library'
    id("org.jetbrains.kotlin.jvm")
    id("org.jetbrains.kotlin.kapt")
    id("org.jetbrains.kotlin.plugin.allopen")
}

version "0.1"
group "info.novatec"

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("external.task.worker.feature.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-runtime")

    // Declaring it api() allows users to use the "old way" of building a client
    api("org.camunda.bpm:camunda-external-task-client:1.4.1")
    api("com.sun.xml.bind:jaxb-impl:2.3.3")

    runtimeOnly("ch.qos.logback:logback-classic")

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt("io.micronaut:micronaut-inject-java:$micronautVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

java {
    sourceCompatibility = JavaVersion.toVersion('1.8')
    targetCompatibility = JavaVersion.toVersion('1.8')
}

java {
    withJavadocJar()
    withSourcesJar()
}
tasks {
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}
